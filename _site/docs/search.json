[{"slug":"advanced-topics","title":"Advanced topics","content":"Advanced topics\n\nThis page needs to be written, want to help out? Checkout GitHub repo!","destination":"advanced-topics.html"},{"slug":"check-mode","title":"Check mode","content":"Check mode\n\nJSON Schema for PHP check mode can be configured using the flags from the Constraint class. These can be configured as default\nor provided for a single validate() call.\n\n$checkMode = Constraint::CHECKMODENORMAL | Constraint::CHECKMODEVALIDATESCHEMA | Constraint::CHECKMODEAPPLYDEFAULTS;\n\n$validator = new Validator(new Factory(null, null, $checkMode)); \/\/ Setting the default check mode for all validate calls.\n$validator->validate($data, $schema, $checkMode); \/\/ Or set the check mode for this validation call.\n\nAvailable flags\nFlag                                              Value        Description\n:\nConstraint::CHECKMODENORMAL                   0x00000001 Validate in 'normal' mode - this is the default\nConstraint::CHECKMODETYPE_CAST                0x00000002 Enable fuzzy type checking for associative arrays and objects\nConstraint::CHECKMODECOERCE_TYPES             0x00000004 Convert data types to match the schema where possible\nConstraint::CHECKMODEAPPLY_DEFAULTS           0x00000008 Apply default values from the schema if not set\nConstraint::CHECKMODEEXCEPTIONS               0x00000010 Throw an exception immediately if validation fails\nConstraint::CHECKMODEDISABLE_FORMAT           0x00000020 Do not validate \"format\" constraints\nConstraint::CHECKMODEEARLY_COERCE             0x00000040 Apply type coercion as soon as possible\nConstraint::CHECKMODEONLYREQUIREDDEFAULTS   0x00000080 When applying defaults, only set values that are required\nConstraint::CHECKMODEVALIDATE_SCHEMA          0x00000100 Validate the schema as well as the provided document","destination":"check-mode.html"},{"slug":"community-guide","title":"Community guide","content":"Community guide\n\nThis page needs to be written, want to help out? Checkout GitHub repo!","destination":"community-guide.html"},{"slug":"contributors","title":"Contributors","content":"Contributors\n\nJSON Schema for PHP would not exist without the dedication, time, and expertise of our community.\nEvery feature, improvement, and bug fix is the result of people generously sharing their skills and ideas.\nWe are deeply grateful for each and every contribution \u2014 large or small \u2014 that has helped shape this project.\n\nCheck out all the amazing people who have made this possible:\n\n\n\nMade with contrib.rocks.","destination":"contributors.html"},{"slug":"getting-started","title":"Getting started","content":"Getting started\n\nInstalling JSON Schema Using Composer\nThe recommended method of installing JSON Schema is using Composer, which installs the required dependencies on\na per-project basis.\n\ncomposer require justinrainbow\/json-schema\n\nValidating using a schema on disk\n\nvalidate($data, (object)['$ref' => 'file:\/\/' . realpath('schema.json')]);\n\nif ($validator->isValid()) {\necho \"The supplied JSON validates against the schema.\\n\";\n} else {\necho \"JSON does not validate. Violations:\\n\";\nforeach ($validator->getErrors() as $error) {\nprintf(\"[%s] %s\\n\", $error['property'], $error['message']);\n}\n}\n\nValidating using an inline schema\n\naddSchema('internal:\/\/mySchema', $jsonSchema);\n$validator = new Validator(new Factory($schemaStorage));\n\n$validator->validate($data, $jsonSchemaObject);\nif ($validator->isValid()) {\necho \"The supplied JSON validates against the schema.\\n\";\n} else {\necho \"JSON does not validate. Violations:\\n\";\nforeach ($validator->getErrors() as $error) {\nprintf(\"[%s] %s\\n\", $error['property'], $error['message']);\n}\n}","destination":"getting-started.html"}]